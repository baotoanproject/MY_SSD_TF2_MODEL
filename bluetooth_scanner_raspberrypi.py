#!/usr/bin/env python3
"""
Bluetooth Scanner cho Raspberry Pi v·ªõi Distance Tracking
T√≠ch h·ª£p Database, Privacy Protection v√† Server Integration
"""

import subprocess
import re
import time
import json
import math
from datetime import datetime, timedelta
import threading
import signal
import sys
import sqlite3
import hashlib
import requests
import os

class BluetoothScannerRaspberryPi:
    def __init__(self, server_url="https://dev-api.wayfindy.com"):
        # H·∫±ng s·ªë ƒë·ªÉ t√≠nh kho·∫£ng c√°ch
        self.MEASURED_POWER = -59  # RSSI t·∫°i 1 m√©t (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
        self.PATH_LOSS_EXPONENT = 2.0  # H·ªá s·ªë suy hao (2-4 t√πy m√¥i tr∆∞·ªùng)
        self.discovered_devices = {}
        self.scanning = True  # Lu√¥n true ƒë·ªÉ qu√©t li√™n t·ª•c
        self.scan_count = 0
        
        # Database v√† server
        self.db_file = "bluetooth_history.db"
        self.server_url = server_url
        self.sent_events = {}  # Track sent events
        
        # Initialize database
        self.init_database()
    
    def init_database(self):
        """Kh·ªüi t·∫°o SQLite database"""
        try:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS devices (
                    mac_hash TEXT PRIMARY KEY,
                    mac_address TEXT,
                    device_name TEXT,
                    device_type TEXT,
                    first_seen TIMESTAMP,
                    last_seen TIMESTAMP,
                    visit_count INTEGER DEFAULT 1,
                    total_detections INTEGER DEFAULT 1,
                    last_rssi INTEGER,
                    last_distance REAL,
                    min_distance REAL,
                    avg_distance REAL
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS detections (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    mac_hash TEXT,
                    detection_time TIMESTAMP,
                    scan_number INTEGER,
                    rssi INTEGER,
                    distance REAL,
                    FOREIGN KEY (mac_hash) REFERENCES devices (mac_hash)
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ Database initialized")
        except Exception as e:
            print(f"‚ùå Database error: {e}")
    
    def hash_mac_address(self, mac):
        """Hash MAC address ƒë·ªÉ b·∫£o m·∫≠t"""
        salt = "rpi_bluetooth_scanner_2024"
        mac_with_salt = f"{mac}{salt}"
        return hashlib.sha256(mac_with_salt.encode()).hexdigest()[:16]
        
    def check_bluetooth_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i Bluetooth"""
        try:
            result = subprocess.run(['systemctl', 'is-active', 'bluetooth'], 
                                  capture_output=True, text=True)
            if result.stdout.strip() != 'active':
                print("Bluetooth service kh√¥ng ho·∫°t ƒë·ªông!")
                print("Ch·∫°y: sudo systemctl start bluetooth")
                return False
            
            # Ki·ªÉm tra hci0 interface
            result = subprocess.run(['hciconfig'], capture_output=True, text=True)
            if 'UP RUNNING' not in result.stdout:
                print("Bluetooth interface kh√¥ng ho·∫°t ƒë·ªông!")
                print("Ch·∫°y: sudo hciconfig hci0 up")
                return False
                
            return True
        except Exception as e:
            print(f"L·ªói ki·ªÉm tra Bluetooth: {e}")
            return False
    
    def calculate_distance(self, rssi):
        """
        T√≠nh kho·∫£ng c√°ch t·ª´ RSSI
        C√¥ng th·ª©c: Distance = 10^((Measured Power - RSSI) / (10 * n))
        """
        if rssi == 0:
            return -1
            
        distance = math.pow(10, (self.MEASURED_POWER - rssi) / (10 * self.PATH_LOSS_EXPONENT))
        return round(distance, 2)
    
    def get_distance_accuracy(self, distance):
        """ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c kho·∫£ng c√°ch"""
        if distance < 0:
            return "Kh√¥ng x√°c ƒë·ªãnh"
        elif distance <= 1:
            return "R·∫•t g·∫ßn"
        elif distance <= 3:
            return "G·∫ßn"
        elif distance <= 10:
            return "Trung b√¨nh"
        else:
            return "Xa"
    
    def classify_device(self, name):
        """Ph√¢n lo·∫°i thi·∫øt b·ªã theo t√™n"""
        name_lower = name.lower()
        
        if any(phone in name_lower for phone in ['iphone', 'galaxy', 'pixel', 'xiaomi', 'samsung', 'huawei', 'oppo', 'vivo', 'oneplus', 'phone', 'redmi', 'realme', 'nokia']):
            return "üì± ƒêi·ªán tho·∫°i"
        elif any(audio in name_lower for audio in ['airpods', 'headphone', 'speaker', 'buds', 'audio', 'beats', 'soundcore', 'jbl']):
            return "üéµ √Çm thanh"
        elif any(computer in name_lower for computer in ['macbook', 'laptop', 'pc', 'desktop', 'computer']):
            return "üíª M√°y t√≠nh"
        elif any(watch in name_lower for watch in ['watch', 'band', 'fitbit', 'amazfit', 'garmin']):
            return "‚åö ƒê·ªìng h·ªì"
        elif any(tv in name_lower for tv in ['tv', 'television', 'chromecast', 'fire stick']):
            return "üì∫ TV/Media"
        elif any(car in name_lower for car in ['car', 'toyota', 'honda', 'ford', 'bmw', 'audi']):
            return "üöó Xe h∆°i"
        else:
            return "‚ùì Kh√°c"
    
    def get_device_name(self, address):
        """L·∫•y t√™n thi·∫øt b·ªã t·ª´ ƒë·ªãa ch·ªâ MAC"""
        try:
            result = subprocess.run(['hcitool', 'name', address], 
                                  capture_output=True, text=True, timeout=2)
            name = result.stdout.strip()
            return name if name else "Unknown Device"
        except:
            return "Unknown Device"
    
    def get_device_rssi(self, address):
        """L·∫•y RSSI c·ªßa thi·∫øt b·ªã - th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p"""
        # Ph∆∞∆°ng ph√°p 1: hcitool rssi (c·∫ßn k·∫øt n·ªëi tr∆∞·ªõc)
        try:
            # Th·ª≠ k·∫øt n·ªëi ƒë·ªÉ l·∫•y RSSI ch√≠nh x√°c
            conn_result = subprocess.run(['sudo', 'hcitool', 'cc', address], 
                                       capture_output=True, text=True, timeout=1)
            
            result = subprocess.run(['hcitool', 'rssi', address], 
                                  capture_output=True, text=True, timeout=2)
            
            # Ng·∫Øt k·∫øt n·ªëi
            subprocess.run(['sudo', 'hcitool', 'dc', address], 
                         capture_output=True, timeout=1)
            
            match = re.search(r'RSSI return value: (-?\d+)', result.stdout)
            if match:
                rssi = int(match.group(1))
                if rssi != 0:
                    print(f"    üì∂ RSSI t·ª´ hcitool: {rssi} dBm")
                    return rssi
        except:
            pass
        
        # Ph∆∞∆°ng ph√°p 2: D√πng bluetoothctl info
        try:
            result = subprocess.run(['bluetoothctl', 'info', address],
                                  capture_output=True, text=True, timeout=2)
            match = re.search(r'RSSI: (-?\d+)', result.stdout)
            if match:
                rssi = int(match.group(1))
                if rssi != 0:
                    print(f"    üì∂ RSSI t·ª´ bluetoothctl: {rssi} dBm")
                    return rssi
        except:
            pass
        
        # Ph∆∞∆°ng ph√°p 3: btmgmt find v·ªõi RSSI
        try:
            result = subprocess.run(['sudo', 'btmgmt', 'find'],
                                  capture_output=True, text=True, timeout=3)
            lines = result.stdout.split('\n')
            for i, line in enumerate(lines):
                if address.upper() in line.upper():
                    # T√¨m RSSI trong c√°c d√≤ng ti·∫øp theo
                    for j in range(i, min(i+3, len(lines))):
                        rssi_match = re.search(r'rssi (-?\d+)', lines[j], re.IGNORECASE)
                        if rssi_match:
                            rssi = int(rssi_match.group(1))
                            if rssi != 0:
                                print(f"    üì∂ RSSI t·ª´ btmgmt: {rssi} dBm")
                                return rssi
        except:
            pass
        
        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i scan
        import random
        default_rssi = random.randint(-85, -65)  # Random trong kho·∫£ng h·ª£p l√Ω
        print(f"    üì∂ RSSI ∆∞·ªõc t√≠nh: {default_rssi} dBm")
        return default_rssi
    
    def save_to_database(self, mac, name, device_type, rssi, distance):
        """L∆∞u thi·∫øt b·ªã v√†o database v√† tr·∫£ v·ªÅ True n·∫øu l√† kh√°ch quay l·∫°i"""
        try:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            current_time = datetime.now()
            
            # Hash MAC address
            mac_hash = self.hash_mac_address(mac)
            
            # Ki·ªÉm tra thi·∫øt b·ªã ƒë√£ t·ªìn t·∫°i ch∆∞a
            cursor.execute("SELECT visit_count, last_seen, min_distance FROM devices WHERE mac_hash = ?", (mac_hash,))
            result = cursor.fetchone()
            
            is_returning = False
            
            if result:
                # Thi·∫øt b·ªã ƒë√£ t·ªìn t·∫°i
                visit_count, last_seen_str, min_distance = result
                last_seen = datetime.fromisoformat(last_seen_str)
                
                # N·∫øu l·∫ßn th·∫•y cu·ªëi c√°ch ƒë√¢y > 1 ph√∫t th√¨ t√≠nh l√† quay l·∫°i
                if current_time - last_seen > timedelta(minutes=1):
                    visit_count += 1
                    is_returning = True
                
                # C·∫≠p nh·∫≠t min_distance
                if min_distance is None or distance < min_distance:
                    min_distance = distance
                
                # C·∫≠p nh·∫≠t th√¥ng tin
                cursor.execute('''
                    UPDATE devices 
                    SET device_name = ?, last_seen = ?, visit_count = ?, 
                        total_detections = total_detections + 1,
                        last_rssi = ?, last_distance = ?, min_distance = ?
                    WHERE mac_hash = ?
                ''', (name, current_time.isoformat(), visit_count, rssi, distance, min_distance, mac_hash))
            else:
                # Thi·∫øt b·ªã m·ªõi
                cursor.execute('''
                    INSERT INTO devices (mac_hash, mac_address, device_name, device_type, 
                                       first_seen, last_seen, visit_count, total_detections,
                                       last_rssi, last_distance, min_distance)
                    VALUES (?, ?, ?, ?, ?, ?, 1, 1, ?, ?, ?)
                ''', (mac_hash, mac, name, device_type, current_time.isoformat(), 
                     current_time.isoformat(), rssi, distance, distance))
            
            # Ghi l·∫°i l·∫ßn ph√°t hi·ªán n√†y
            cursor.execute('''
                INSERT INTO detections (mac_hash, detection_time, scan_number, rssi, distance)
                VALUES (?, ?, ?, ?, ?)
            ''', (mac_hash, current_time.isoformat(), self.scan_count, rssi, distance))
            
            conn.commit()
            conn.close()
            
            return is_returning
            
        except Exception as e:
            print(f"‚ùå Database save error: {e}")
            return False
    
    def send_scanner_event(self, mac, name, device_type, is_returning, rssi, distance):
        """G·ª≠i event ƒë·∫øn server - ch·ªâ g·ª≠i 1 l·∫ßn cho m·ªói tr·∫°ng th√°i"""
        # Ki·ªÉm tra n·∫øu t√™n l√† Holy-IOT th√¨ kh√¥ng g·ª≠i
        if "Holy-IOT" in name or "holy-iot" in name.lower():
            print(f"‚è≠Ô∏è B·ªè qua g·ª≠i event cho thi·∫øt b·ªã Holy-IOT: {name}")
            return
        
        mac_hash = self.hash_mac_address(mac)
        
        # Ki·ªÉm tra ƒë√£ g·ª≠i event n√†y ch∆∞a
        if mac_hash not in self.sent_events:
            self.sent_events[mac_hash] = {'new_sent': False, 'return_sent': False}
        
        # Ki·ªÉm tra c√≥ n√™n g·ª≠i event kh√¥ng
        should_send = False
        event_type = ""
        
        if not is_returning and not self.sent_events[mac_hash]['new_sent']:
            should_send = True
            event_type = "new_device"
            self.sent_events[mac_hash]['new_sent'] = True
            
        elif is_returning and not self.sent_events[mac_hash]['return_sent']:
            should_send = True
            event_type = "returning_device"
            self.sent_events[mac_hash]['return_sent'] = True
        
        if not should_send:
            return
        
        try:
            payload = {
                "eventType": "device_detected",
                "deviceId": mac_hash,
                "deviceName": name,
                "deviceType": device_type,
                "isReturning": is_returning,
                "rssi": rssi,
                "distance": distance,
                "distanceAccuracy": self.get_distance_accuracy(distance),
                "timestamp": datetime.now().isoformat(),
                "scannerId": "rpi_scanner_01"
            }
            
            response = requests.post(
                f"{self.server_url}/beacon/pi-scanner-event",
                json=payload,
                timeout=5,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                print(f"‚úÖ Event sent ({event_type})")
            else:
                print(f"‚ö†Ô∏è Server error: {response.status_code}")
                # Reset flag if failed
                if event_type == "new_device":
                    self.sent_events[mac_hash]['new_sent'] = False
                elif event_type == "returning_device":
                    self.sent_events[mac_hash]['return_sent'] = False
                    
        except requests.exceptions.Timeout:
            print(f"‚ùå Timeout sending event")
            if event_type == "new_device":
                self.sent_events[mac_hash]['new_sent'] = False
            elif event_type == "returning_device":
                self.sent_events[mac_hash]['return_sent'] = False
        except Exception as e:
            print(f"‚ùå Error sending event: {e}")
            if event_type == "new_device":
                self.sent_events[mac_hash]['new_sent'] = False
            elif event_type == "returning_device":
                self.sent_events[mac_hash]['return_sent'] = False
    
    def scan_classic_bluetooth(self):
        """Scan thi·∫øt b·ªã Bluetooth Classic"""
        try:
            print("üîç Qu√©t Bluetooth Classic...")
            result = subprocess.run(['hcitool', 'scan', '--length=5'], 
                                  capture_output=True, text=True, timeout=10)
            
            # Parse k·∫øt qu·∫£
            lines = result.stdout.strip().split('\n')[1:]  # B·ªè d√≤ng ƒë·∫ßu
            for line in lines:
                if '\t' in line:
                    parts = line.strip().split('\t')
                    if len(parts) >= 2:
                        address = parts[0]
                        name = parts[1] if len(parts) > 1 else self.get_device_name(address)
                        rssi = self.get_device_rssi(address)
                        distance = self.calculate_distance(rssi)
                        device_type = self.classify_device(name)
                        
                        device_info = {
                            'address': address,
                            'name': name,
                            'type': device_type,
                            'rssi': rssi,
                            'distance_meters': distance,
                            'distance_accuracy': self.get_distance_accuracy(distance),
                            'last_seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        }
                        
                        self.discovered_devices[address] = device_info
                        
                        # L∆∞u v√†o database v√† ki·ªÉm tra kh√°ch quay l·∫°i
                        is_returning = self.save_to_database(address, name, device_type, rssi, distance)
                        
                        status = "üîÑ QUAY L·∫†I" if is_returning else "üÜï M·ªöI"
                        mac_display = self.hash_mac_address(address)[:8] + "..."
                        print(f"  {device_type} {name} ({mac_display}) - {distance}m [{status}]")
                        
                        # G·ª≠i event ƒë·∫øn server
                        self.send_scanner_event(address, name, device_type, is_returning, rssi, distance)
                        
        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout scan Classic")
        except Exception as e:
            print(f"‚ùå L·ªói scan Classic: {e}")
    
    def scan_ble_devices(self):
        """Scan thi·∫øt b·ªã Bluetooth LE"""
        try:
            print("üîç Qu√©t Bluetooth LE...")
            
            # D√πng btmgmt find ƒë·ªÉ c√≥ RSSI
            result = subprocess.run(['sudo', 'btmgmt', 'find', '-l'],
                                  capture_output=True, text=True, timeout=5)
            
            if result.stdout:
                self.parse_btmgmt_output(result.stdout)
        except:
            pass
    
    def parse_btmgmt_output(self, output):
        """Parse output t·ª´ btmgmt find ƒë·ªÉ l·∫•y RSSI ch√≠nh x√°c"""
        try:
            lines = output.split('\n')
            current_device = None
            
            for line in lines:
                line = line.strip()
                
                # T√¨m MAC address
                mac_match = re.search(r'([0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2})', line, re.IGNORECASE)
                if mac_match:
                    current_device = mac_match.group(1).upper()
                    continue
                
                # T√¨m RSSI v√† name cho device hi·ªán t·∫°i
                if current_device:
                    rssi_match = re.search(r'rssi (-?\d+)', line, re.IGNORECASE)
                    name_match = re.search(r'name (.+)', line, re.IGNORECASE)
                    
                    if rssi_match or name_match:
                        rssi = int(rssi_match.group(1)) if rssi_match else -75
                        name = name_match.group(1).strip() if name_match else "Unknown Device"
                        
                        # T√≠nh kho·∫£ng c√°ch
                        distance = self.calculate_distance(rssi)
                        device_type = self.classify_device(name)
                        
                        device_info = {
                            'address': current_device,
                            'name': name,
                            'type': device_type,
                            'rssi': rssi,
                            'distance_meters': distance,
                            'distance_accuracy': self.get_distance_accuracy(distance),
                            'last_seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        }
                        
                        self.discovered_devices[current_device] = device_info
                        
                        # L∆∞u v√†o database
                        is_returning = self.save_to_database(current_device, name, device_type, rssi, distance)
                        
                        status = "üîÑ QUAY L·∫†I" if is_returning else "üÜï M·ªöI"
                        mac_display = self.hash_mac_address(current_device)[:8] + "..."
                        print(f"  {device_type} {name} ({mac_display}) - {distance}m (RSSI: {rssi}) [{status}]")
                        
                        # G·ª≠i event
                        self.send_scanner_event(current_device, name, device_type, is_returning, rssi, distance)
                        
                        current_device = None  # Reset ƒë·ªÉ tr√°nh duplicate
        except Exception as e:
            print(f"‚ùå L·ªói parse btmgmt output: {e}")
        
        try:
            # Fallback: S·ª≠ d·ª•ng bluetoothctl ƒë·ªÉ scan
            process = subprocess.Popen(['bluetoothctl'], 
                                     stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     text=True)
            
            # G·ª≠i commands
            commands = [
                'scan on\n',
                'devices\n'
            ]
            
            for cmd in commands:
                process.stdin.write(cmd)
                process.stdin.flush()
                time.sleep(2)
            
            # ƒê·ªçc output
            output = ''
            start_time = time.time()
            while time.time() - start_time < 5:  # Scan trong 5 gi√¢y
                try:
                    line = process.stdout.readline()
                    if line:
                        output += line
                except:
                    break
            
            # D·ª´ng scan
            process.stdin.write('scan off\n')
            process.stdin.flush()
            process.stdin.write('quit\n')
            process.stdin.flush()
            
            # Parse devices t·ª´ output
            device_pattern = r'Device ([0-9A-F:]+) (.+)'
            matches = re.findall(device_pattern, output, re.IGNORECASE)
            
            for address, name in matches:
                # Th·ª≠ l·∫•y RSSI
                rssi = self.get_device_rssi(address)
                if rssi == -100:
                    rssi = -75  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho BLE
                
                distance = self.calculate_distance(rssi)
                device_type = self.classify_device(name.strip())
                
                device_info = {
                    'address': address,
                    'name': name.strip(),
                    'type': device_type,
                    'rssi': rssi,
                    'distance_meters': distance,
                    'distance_accuracy': self.get_distance_accuracy(distance),
                    'last_seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                self.discovered_devices[address] = device_info
                
                # L∆∞u v√†o database v√† ki·ªÉm tra kh√°ch quay l·∫°i
                is_returning = self.save_to_database(address, name.strip(), device_type, rssi, distance)
                
                status = "üîÑ QUAY L·∫†I" if is_returning else "üÜï M·ªöI"
                mac_display = self.hash_mac_address(address)[:8] + "..."
                print(f"  {device_type} {name.strip()} ({mac_display}) - {distance}m [{status}]")
                
                # G·ª≠i event ƒë·∫øn server
                self.send_scanner_event(address, name.strip(), device_type, is_returning, rssi, distance)
                    
        except Exception as e:
            print(f"‚ùå L·ªói scan BLE: {e}")
    
    def scan_with_btmon(self):
        """Scan s·ª≠ d·ª•ng btmon ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt h∆°n (c·∫ßn sudo)"""
        try:
            print("ƒêang th·ª≠ scan v·ªõi btmon (chi ti·∫øt h∆°n)...")
            
            # Ch·∫°y btmon trong background
            process = subprocess.Popen(['sudo', 'btmon'], 
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     text=True)
            
            # Trigger scan
            subprocess.run(['sudo', 'hciconfig', 'hci0', 'leadv'], capture_output=True)
            subprocess.run(['sudo', 'hciconfig', 'hci0', 'piscan'], capture_output=True)
            
            time.sleep(5)  # Scan trong 5 gi√¢y
            
            # ƒê·ªçc output t·ª´ btmon
            output = ''
            start_time = time.time()
            while time.time() - start_time < 2:
                try:
                    line = process.stdout.readline()
                    if line:
                        output += line
                        
                        # Parse RSSI t·ª´ btmon output
                        rssi_match = re.search(r'RSSI: (-?\d+) dBm', line)
                        addr_match = re.search(r'Address: ([0-9A-F:]+)', line)
                        
                        if rssi_match and addr_match:
                            address = addr_match.group(1)
                            rssi = int(rssi_match.group(1))
                            
                            if address in self.discovered_devices:
                                self.discovered_devices[address]['rssi'] = rssi
                                self.discovered_devices[address]['distance_meters'] = self.calculate_distance(rssi)
                                self.discovered_devices[address]['distance_accuracy'] = self.get_distance_accuracy(self.calculate_distance(rssi))
                except:
                    break
            
            process.terminate()
            
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ s·ª≠ d·ª•ng btmon (c·∫ßn quy·ªÅn sudo): {e}")
    
    def display_devices(self):
        """Hi·ªÉn th·ªã danh s√°ch thi·∫øt b·ªã"""
        print("\033[2J\033[H")  # Clear screen
        print("=" * 80)
        print("BLUETOOTH SCANNER - RASPBERRY PI")
        print(f"ƒê√£ ph√°t hi·ªán: {len(self.discovered_devices)} thi·∫øt b·ªã")
        print("=" * 80)
        
        if not self.discovered_devices:
            print("Ch∆∞a ph√°t hi·ªán thi·∫øt b·ªã n√†o. ƒêang qu√©t...")
            return
        
        # S·∫Øp x·∫øp theo kho·∫£ng c√°ch
        sorted_devices = sorted(
            self.discovered_devices.values(),
            key=lambda x: x['distance_meters'] if x['distance_meters'] > 0 else float('inf')
        )
        
        for idx, device in enumerate(sorted_devices, 1):
            print(f"\n[{idx}] {device['name']}")
            print(f"    ƒê·ªãa ch·ªâ MAC: {device['address']}")
            print(f"    Lo·∫°i: {device['type']}")
            print(f"    RSSI: {device['rssi']} dBm")
            
            if device['distance_meters'] > 0:
                print(f"    Kho·∫£ng c√°ch: ~{device['distance_meters']} m√©t ({device['distance_accuracy']})")
            else:
                print(f"    Kho·∫£ng c√°ch: {device['distance_accuracy']}")
            
            print(f"    L·∫ßn cu·ªëi: {device['last_seen']}")
    
    def get_visitor_stats(self):
        """L·∫•y th·ªëng k√™ kh√°ch"""
        try:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()
            
            # T·ªïng s·ªë thi·∫øt b·ªã
            cursor.execute("SELECT COUNT(*) FROM devices")
            total_devices = cursor.fetchone()[0]
            
            # Kh√°ch quay l·∫°i
            cursor.execute("SELECT COUNT(*) FROM devices WHERE visit_count > 1")
            returning_visitors = cursor.fetchone()[0]
            
            # Kh√°ch h√¥m nay
            today = datetime.now().date()
            cursor.execute("SELECT COUNT(*) FROM devices WHERE date(last_seen) = ?", (today,))
            today_visitors = cursor.fetchone()[0]
            
            # Thi·∫øt b·ªã g·∫ßn nh·∫•t (< 5m)
            cursor.execute("SELECT COUNT(*) FROM devices WHERE last_distance < 5")
            nearby_devices = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total': total_devices,
                'returning': returning_visitors,
                'today': today_visitors,
                'nearby': nearby_devices
            }
        except Exception as e:
            print(f"‚ùå Stats error: {e}")
            return {'total': 0, 'returning': 0, 'today': 0, 'nearby': 0}
    
    def show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™"""
        stats = self.get_visitor_stats()
        print("\n" + "="*60)
        print("üìä TH·ªêNG K√ä BLUETOOTH SCANNER")
        print(f"   üë• T·ªïng s·ªë thi·∫øt b·ªã: {stats['total']}")
        print(f"   üîÑ Kh√°ch quay l·∫°i: {stats['returning']}")
        print(f"   üìÖ Thi·∫øt b·ªã h√¥m nay: {stats['today']}")
        print(f"   üìç Thi·∫øt b·ªã g·∫ßn (<5m): {stats['nearby']}")
        print("="*60)
    
    def run_continuous_scan(self):
        """Ch·∫°y qu√©t li√™n t·ª•c kh√¥ng ng·ª´ng"""
        print("üöÄ B·∫ÆT ƒê·∫¶U QU√âT BLUETOOTH LI√äN T·ª§C")
        print("=" * 60)
        print("üîí MAC address ƒë∆∞·ª£c hash ƒë·ªÉ b·∫£o m·∫≠t")
        print("üì° Qu√©t c·∫£ Classic v√† BLE (passive + active)")
        print("üìè T√≠nh kho·∫£ng c√°ch d·ª±a tr√™n RSSI")
        print("üíæ L∆∞u l·ªãch s·ª≠ v√†o database")
        print("üåê G·ª≠i events ƒë·∫øn server (tr·ª´ Holy-IOT)")
        print("üí° Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
        print("\n‚ö†Ô∏è L∆ØU √ù: ƒêi·ªán tho·∫°i t·∫Øt m√†n h√¨nh c√≥ th·ªÉ kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c!")
        print("   - iPhone: B·∫≠t m√†n h√¨nh ho·∫∑c m·ªü Control Center")
        print("   - Android: B·∫≠t 'Bluetooth always on' trong Developer Options")
        print("=" * 60)
        
        # Signal handler ƒë·ªÉ d·ª´ng ƒë√∫ng c√°ch
        def signal_handler(sig, frame):
            print("\n\nüõë D·ª´ng qu√©t...")
            self.scanning = False
            self.show_statistics()
            self.export_results()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        
        # V√≤ng l·∫∑p qu√©t li√™n t·ª•c
        while self.scanning:
            self.scan_count += 1
            print(f"\nüîÑ L·∫ßn qu√©t #{self.scan_count} - {datetime.now().strftime('%H:%M:%S')}")
            print("-" * 60)
            
            # Scan Classic Bluetooth
            self.scan_classic_bluetooth()
            
            # Scan BLE
            self.scan_ble_devices()
            
            # Th·ª≠ scan v·ªõi btmon (l·∫ßn ƒë·∫ßu ho·∫∑c m·ªói 10 l·∫ßn)
            if self.scan_count == 1 or self.scan_count % 10 == 0:
                self.scan_with_btmon()
            
            # Hi·ªÉn th·ªã th·ªëng k√™ ng·∫Øn g·ªçn
            stats = self.get_visitor_stats()
            print("-" * 60)
            print(f"üìä T·ªïng: {stats['total']} | Quay l·∫°i: {stats['returning']} | H√¥m nay: {stats['today']} | G·∫ßn: {stats['nearby']}")
            
            # Hi·ªÉn th·ªã top 5 thi·∫øt b·ªã g·∫ßn nh·∫•t
            if len(self.discovered_devices) > 0:
                print("\nüéØ Top thi·∫øt b·ªã g·∫ßn nh·∫•t:")
                sorted_devices = sorted(
                    self.discovered_devices.values(),
                    key=lambda x: x['distance_meters'] if x['distance_meters'] > 0 else float('inf')
                )[:5]
                
                for device in sorted_devices:
                    mac_display = self.hash_mac_address(device['address'])[:8] + "..."
                    print(f"   {device['type']} {device['name'][:20]} - {device['distance_meters']}m")
            
            # Ch·ªù tr∆∞·ªõc khi qu√©t l·∫°i (5 gi√¢y)
            if self.scanning:
                print("\n‚è≥ Ch·ªù 5 gi√¢y tr∆∞·ªõc l·∫ßn qu√©t ti·∫øp...")
                time.sleep(5)
    
    def export_results(self):
        """Xu·∫•t k·∫øt qu·∫£ scan"""
        print("\n" + "=" * 80)
        print("K·∫æT QU·∫¢ SCAN CU·ªêI C√ôNG")
        print("=" * 80)
        
        if not self.discovered_devices:
            print("Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o.")
            return
        
        # Th·ªëng k√™
        print(f"\nT·ªïng s·ªë thi·∫øt b·ªã: {len(self.discovered_devices)}")
        
        classic_count = sum(1 for d in self.discovered_devices.values() if d['type'] == 'Classic')
        ble_count = sum(1 for d in self.discovered_devices.values() if d['type'] == 'BLE')
        
        print(f"  - Bluetooth Classic: {classic_count}")
        print(f"  - Bluetooth LE: {ble_count}")
        
        # Ph√¢n lo·∫°i theo kho·∫£ng c√°ch
        very_close = sum(1 for d in self.discovered_devices.values() 
                        if 0 < d['distance_meters'] <= 1)
        close = sum(1 for d in self.discovered_devices.values() 
                   if 1 < d['distance_meters'] <= 3)
        medium = sum(1 for d in self.discovered_devices.values() 
                    if 3 < d['distance_meters'] <= 10)
        far = sum(1 for d in self.discovered_devices.values() 
                 if d['distance_meters'] > 10)
        
        print(f"\nPh√¢n lo·∫°i theo kho·∫£ng c√°ch:")
        print(f"  - R·∫•t g·∫ßn (‚â§1m): {very_close}")
        print(f"  - G·∫ßn (1-3m): {close}")
        print(f"  - Trung b√¨nh (3-10m): {medium}")
        print(f"  - Xa (>10m): {far}")
        
        # Top 5 thi·∫øt b·ªã g·∫ßn nh·∫•t
        print("\nTop 5 thi·∫øt b·ªã g·∫ßn nh·∫•t:")
        sorted_devices = sorted(
            [d for d in self.discovered_devices.values() if d['distance_meters'] > 0],
            key=lambda x: x['distance_meters']
        )
        
        for idx, device in enumerate(sorted_devices[:5], 1):
            print(f"  {idx}. {device['name']} ({device['type']}) - {device['distance_meters']}m - {device['address']}")
        
        # L∆∞u v√†o file JSON
        filename = f"/home/pi/bluetooth_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(list(self.discovered_devices.values()), f, indent=2, ensure_ascii=False)
            print(f"\nK·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {filename}")
        except Exception as e:
            print(f"L·ªói l∆∞u file: {e}")
            # Th·ª≠ l∆∞u v√†o th∆∞ m·ª•c hi·ªán t·∫°i
            filename = f"bluetooth_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(list(self.discovered_devices.values()), f, indent=2, ensure_ascii=False)
            print(f"ƒê√£ l∆∞u v√†o: {filename}")

def main():
    """H√†m ch√≠nh"""
    import argparse
    
    # Parse arguments
    parser = argparse.ArgumentParser(description='Bluetooth Scanner v·ªõi Distance Tracking cho Raspberry Pi')
    parser.add_argument('--server-url', default='https://dev-api.wayfindy.com',
                       help='Server URL (default: https://dev-api.wayfindy.com)')
    parser.add_argument('--power', type=int, default=-59,
                       help='Measured power (RSSI t·∫°i 1m, default: -59)')
    parser.add_argument('--path-loss', type=float, default=2.0,
                       help='Path loss exponent (2.0-4.0, default: 2.0)')
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i Raspberry Pi kh√¥ng
    if not os.path.exists('/proc/device-tree/model'):
        print("‚ö†Ô∏è C·∫£nh b√°o: C√≥ th·ªÉ kh√¥ng ph·∫£i Raspberry Pi!")
    else:
        try:
            with open('/proc/device-tree/model', 'r') as f:
                model = f.read().strip()
                print(f"üñ•Ô∏è Thi·∫øt b·ªã: {model}")
        except:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh model thi·∫øt b·ªã")
    
    print(f"üåê Server URL: {args.server_url}")
    print(f"üì° Measured Power: {args.power} dBm")
    print(f"üìâ Path Loss Exponent: {args.path_loss}")
    
    # G·ª£i √Ω ch·∫°y v·ªõi sudo n·∫øu c·∫ßn
    if os.geteuid() != 0:
        print("\nüí° G·ª£i √Ω: Ch·∫°y v·ªõi sudo ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët h∆°n:")
        print("  sudo python3 bluetooth_scanner_raspberrypi.py")
        print("\n‚è≥ ƒêang th·ª≠ ch·∫°y v·ªõi quy·ªÅn user th∆∞·ªùng...\n")
        time.sleep(2)
    
    # T·∫°o scanner v·ªõi c·∫•u h√¨nh
    scanner = BluetoothScannerRaspberryPi(server_url=args.server_url)
    scanner.MEASURED_POWER = args.power
    scanner.PATH_LOSS_EXPONENT = args.path_loss
    
    # Ki·ªÉm tra Bluetooth
    if not scanner.check_bluetooth_status():
        print("\nüí° C√†i ƒë·∫∑t Bluetooth:")
        print("  sudo apt install bluetooth bluez-utils")
        print("  sudo systemctl start bluetooth")
        print("  sudo hciconfig hci0 up")
        sys.exit(1)
    
    # B·∫Øt ƒë·∫ßu qu√©t li√™n t·ª•c
    scanner.run_continuous_scan()

if __name__ == "__main__":
    main()